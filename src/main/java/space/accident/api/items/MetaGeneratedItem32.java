package space.accident.api.items;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.material.Material;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.Nullable;
import space.accident.api.API;
import space.accident.api.enums.MaterialList;
import space.accident.api.enums.Materials;
import space.accident.api.enums.OrePrefixes;
import space.accident.api.interfaces.IIconContainer;
import space.accident.api.util.GT_LanguageManager;
import space.accident.api.util.GT_OreDictUnificator;
import space.accident.api.util.Utility;

import java.util.Arrays;
import java.util.List;

import static space.accident.api.API.MAX_MATERIALS;

public abstract class MetaGeneratedItem32 extends MetaGeneratedItem {
	
	protected final OrePrefixes[] mGeneratedPrefixList;
	
	public MetaGeneratedItem32(String unLocalName, OrePrefixes... ores) {
		super(unLocalName, (short) MAX_COUNT_AUTOGENERATED_ITEMS, (short) 766);
		if (ores.length > 16) throw new IndexOutOfBoundsException("Maximum ores for Item = 16");
		
		mGeneratedPrefixList = Arrays.copyOf(ores, 16);
		
		for (int i = 0; i < MAX_COUNT_AUTOGENERATED_ITEMS; i++) {
			OrePrefixes ore = mGeneratedPrefixList[i / MAX_MATERIALS];
			if (ore == null) continue;
			Materials mat = API.sGeneratedMaterials[i % MAX_MATERIALS];
			if (mat == null) continue;
			if (doesMaterialAllowGeneration(ore, mat)) {
				ItemStack tStack = new ItemStack(this, 1, i);
				GT_LanguageManager.addStringLocalization(getUnlocalizedName(tStack) + ".name", GT_LanguageManager.i18nPlaceholder ? getDefaultLocalizationFormat(ore, mat, i) : getDefaultLocalization(ore, mat, i));
				GT_LanguageManager.addStringLocalization(getUnlocalizedName(tStack) + ".tooltip", mat.getToolTip());
				GT_OreDictUnificator.registerOre(ore.get(mat), tStack);
			}
		}
	}
	
	/**
	 * @return the Color Modulation the Material is going to be rendered with.
	 */
	@Override
	public int[] getRGBa(ItemStack aStack) {
		Materials tMaterial = API.sGeneratedMaterials[getDamage(aStack) % MAX_MATERIALS];
		return tMaterial == null ? MaterialList._NULL.getRGBA() : tMaterial.getRGBA();
	}
	
	/**
	 * @param aPrefix   this can be null, you have to return false in that case
	 * @param aMaterial this can be null, you have to return false in that case
	 * @return if this Item should be generated and visible.
	 */
	public boolean doesMaterialAllowGeneration(OrePrefixes aPrefix, Materials aMaterial) {
		return aPrefix != null && aPrefix.doGenerateItem(aMaterial);
	}
	
	/**
	 * @param aPrefix   the OreDict Prefix
	 * @param aMaterial the Material
	 * @param aMetaData a Index from [0 - 31999]
	 * @return the Localized Name when default LangFiles are used.
	 */
	public String getDefaultLocalization(OrePrefixes aPrefix, Materials aMaterial, int aMetaData) {
		return aPrefix.getDefaultLocalNameForItem(aMaterial);
	}
	
	/**
	 * @param aPrefix   the OreDict Prefix
	 * @param aMaterial the Material
	 * @param aMetaData a Index from [0 - 31999]
	 * @return the Localized Name Format when default LangFiles are used.
	 */
	public String getDefaultLocalizationFormat(OrePrefixes aPrefix, Materials aMaterial, int aMetaData) {
		return aPrefix.getDefaultLocalNameFormatForItem(aMaterial);
	}
	
	/**
	 * @param aMetaData a Index from [0 - 31999]
	 * @param aMaterial the Material
	 * @return an Icon Container for the Item Display.
	 */

	public final IIconContainer getIconContainer(int aMetaData, Materials aMaterial) {
		OrePrefixes ore = mGeneratedPrefixList[aMetaData / MAX_MATERIALS];
		if (ore != null && ore.textureId >= 0) {
			return aMaterial.icon.textures[ore.textureId];
		}
		return null;
	}
	
	/**
	 * @param aPrefix         always != null
	 * @param aMaterial       always != null
	 * @param aDoShowAllItems this is the Configuration Setting of the User, if he wants to see all the Stuff like Tiny Dusts or Crushed Ores as well.
	 * @return if this Item should be visible in NEI or Creative
	 */
	public boolean doesShowInCreative(OrePrefixes aPrefix, Materials aMaterial, boolean aDoShowAllItems) {
		return true;
	}
	
	@Override
	public String getItemStackDisplayName(ItemStack aStack) {
		String aName = super.getItemStackDisplayName(aStack);
		int aDamage = aStack.getItemDamage();
		if (aDamage < MAX_COUNT_AUTOGENERATED_ITEMS && aDamage >= 0) {
			return Utility.getLocalizedNameForItem(aName, aDamage % MAX_MATERIALS);
		}
		return aName;
	}
	
	@Override
	public ItemStack getContainerItem(ItemStack aStack) {
		int aDamage = aStack.getItemDamage();
		if (aDamage < MAX_COUNT_AUTOGENERATED_ITEMS && aDamage >= 0) {
			Materials aMaterial = API.sGeneratedMaterials[aDamage % MAX_MATERIALS];
			if (aMaterial != null && aMaterial != MaterialList._NULL) {
				OrePrefixes aPrefix = mGeneratedPrefixList[aDamage / MAX_MATERIALS];
				if (aPrefix != null) return Utility.copyAmount(1, aPrefix.mContainerItem);
			}
		}
		return null;
	}
	
	@Override
	public final IIconContainer getIconContainer(int aMetaData) {
		return API.sGeneratedMaterials[aMetaData % MAX_MATERIALS] == null ? null : getIconContainer(aMetaData, API.sGeneratedMaterials[aMetaData % MAX_MATERIALS]);
	}
	
	@Override
	@SideOnly(Side.CLIENT)
	public final void getSubItems(Item aItem, CreativeTabs aCreativeTab, List aList) {
		for (int i = 0; i < MAX_COUNT_AUTOGENERATED_ITEMS; i++) {
			OrePrefixes aPrefix = mGeneratedPrefixList[i / MAX_MATERIALS];
			Materials aMaterial = API.sGeneratedMaterials[i % MAX_MATERIALS];
			if (aPrefix != null && aMaterial != null) {
				if (doesMaterialAllowGeneration(aPrefix, aMaterial) && doesShowInCreative(aPrefix, aMaterial, API.sDoShowAllItemsInCreative)) {
					ItemStack tStack = new ItemStack(this, 1, i);
					isItemStackUsable(tStack);
					aList.add(tStack);
				}
			}
		}
		super.getSubItems(aItem, aCreativeTab, aList);
	}
	
	@Override
	public final IIcon getIconFromDamage(int aMetaData) {
		if (aMetaData < 0) return null;
		if (aMetaData < MAX_COUNT_AUTOGENERATED_ITEMS) {
			Materials tMaterial = API.sGeneratedMaterials[aMetaData % MAX_MATERIALS];
			if (tMaterial == null) return null;
			IIconContainer tIcon = getIconContainer(aMetaData, tMaterial);
			if (tIcon != null) {
				return tIcon.getIcon();
			}
			return null;
		}
		return aMetaData - MAX_COUNT_AUTOGENERATED_ITEMS < mIconList.length ? mIconList[aMetaData - MAX_COUNT_AUTOGENERATED_ITEMS][0] : null;
	}
	
	@Override
	public int getItemStackLimit(ItemStack aStack) {
		int tDamage = getDamage(aStack);
		if (tDamage < MAX_COUNT_AUTOGENERATED_ITEMS && mGeneratedPrefixList[tDamage / MAX_MATERIALS] != null) {
			return Math.min(super.getItemStackLimit(aStack), mGeneratedPrefixList[tDamage / MAX_MATERIALS].stackSize);
		}
		return super.getItemStackLimit(aStack);
	}
	
}
