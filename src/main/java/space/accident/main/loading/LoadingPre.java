package space.accident.main.loading;

import cpw.mods.fml.common.event.FMLInterModComms;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.registry.GameRegistry;
import space.accident.api.API;
import space.accident.api.damagesources.EnchRadioactivity;
import space.accident.api.enums.MaterialList;
import space.accident.api.metatileentity.base.BaseMetaPipeEntity;
import space.accident.api.metatileentity.base.BaseMetaTileEntity;
import space.accident.api.metatileentity.implementations.machines.Machine_Transformer;
import space.accident.api.metatileentity.implementations.hathes.*;
import space.accident.api.util.LanguageManager;
import space.accident.main.IntegrationConstants;
import space.accident.main.common.blocks.Block_Machines;
import space.accident.main.items.*;

import java.util.Locale;

import static space.accident.api.enums.Values.V;
import static space.accident.main.MetaTileInfo.*;

public class LoadingPre {
	public static void init(FMLPreInitializationEvent e) {
		ParentIntegrations.init();
		
		EnchRadioactivity.register();
		MaterialList.registerMaterials();
		initLang(e);
		initItem();
		
		Block_Machines.register();
		initMetaTiles();
		initCables();
		initFluidPipes();
		initItemPipes();
		initMachines();
	}
	
	
	private static void initLang(FMLPreInitializationEvent e) {
		Locale.setDefault(Locale.ENGLISH);
		LanguageManager.initLocalization(e.getModConfigurationDirectory().getParentFile());
	}
	
	private static void initItem() {
		ItemDebug.register();
		AutoGeneratedItemsPage1.register();
		StaticItemsToolsPage1.register();
		FluidDisplayItem.register();
	}
	
	private static void initMetaTiles() {
		BaseMetaTileEntity te = API.constructBaseMetaTileEntity();
		GameRegistry.registerTileEntity(te.getClass(), "BaseMetaTileEntity");
		FMLInterModComms.sendMessage(IntegrationConstants.AE2, "whitelist-spatial", te.getClass().getName());
		
		GameRegistry.registerTileEntity(BaseMetaPipeEntity.class, "BaseMetaPipeEntity");
		FMLInterModComms.sendMessage(IntegrationConstants.AE2, "whitelist-spatial", BaseMetaPipeEntity.class.getName());
	}
	
	private static void initItemPipes() {
		API.generateItemPipes(MaterialList.COBALT, MaterialList.COBALT.name, ITEM_PIPES_ID_START += 5, 2);
		if (ITEM_PIPES_ID_START > ITEM_PIPES_ID_END) throw new IndexOutOfBoundsException("Conflict MetaTiles IDs");
	}
	
	private static void initFluidPipes() {
		API.generateFluidPipes(MaterialList.COPPER, MaterialList.COPPER.name, FLUID_PIPES_ID_START += 5, 20, 1000);
		if (FLUID_PIPES_ID_START > FLUID_PIPES_ID_END) throw new IndexOutOfBoundsException("Conflict MetaTiles IDs");
	}
	
	private static void initCables() {
		MaterialList.COPPER.createAllWires();
		API.registerCable(MaterialList.COPPER, CABLES_ID_START += 9, 2, 4, 1, V[5], true, false);
		if (CABLES_ID_START > CABLES_ID_END) throw new IndexOutOfBoundsException("Conflict MetaTiles IDs");
	}
	
	private static void initMachines() {
		ItemList.Transformer_LV_ULV.set(new Machine_Transformer(MACHINES_ID_START++, "Transformer (ULV)", 0, "LV -> ULV (Use Soft Mallet to invert)").get(1L));
		ItemList.Transformer_LV_LV.set(new Machine_Transformer(MACHINES_ID_START++, "Transformer (LV)", 1, "MV -> LV (Use Soft Mallet to invert)").get(1L));
		
		ItemList.Hatch_Input_ULV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (ULV)", 0).get(1L));
		ItemList.Hatch_Input_LV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (LV)", 1).get(1L));
		ItemList.Hatch_Input_MV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (MV)", 2).get(1L));
		ItemList.Hatch_Input_HV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (HV)", 3).get(1L));
		ItemList.Hatch_Input_EV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (EV)", 4).get(1L));
		ItemList.Hatch_Input_IV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (IV)", 5).get(1L));
		ItemList.Hatch_Input_LuV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (LuV)", 6).get(1L));
		ItemList.Hatch_Input_ZPM.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (ZPM)", 7).get(1L));
		ItemList.Hatch_Input_UV.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (UV)", 8).get(1L));
		ItemList.Hatch_Input_MAX.set(new Hatch_Input_Fluid(MACHINES_ID_START++, "Input Hatch (UHV)", 9).get(1L));
		
		ItemList.Hatch_Output_ULV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (ULV)", 0).get(1L));
		ItemList.Hatch_Output_LV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (LV)", 1).get(1L));
		ItemList.Hatch_Output_MV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (MV)", 2).get(1L));
		ItemList.Hatch_Output_HV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (HV)", 3).get(1L));
		ItemList.Hatch_Output_EV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (EV)", 4).get(1L));
		ItemList.Hatch_Output_IV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (IV)", 5).get(1L));
		ItemList.Hatch_Output_LuV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (LuV)", 6).get(1L));
		ItemList.Hatch_Output_ZPM.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (ZPM)", 7).get(1L));
		ItemList.Hatch_Output_UV.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (UV)", 8).get(1L));
		ItemList.Hatch_Output_MAX.set(new Hatch_Output_Fluid(MACHINES_ID_START++, "Output Hatch (UHV)", 9).get(1L));
		
		ItemList.Hatch_Input_Bus_ULV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (ULV)", 0, 1).get(1L));
		ItemList.Hatch_Input_Bus_LV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (LV)", 1, 4).get(1L));
		ItemList.Hatch_Input_Bus_MV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (MV)", 2, 9).get(1L));
		ItemList.Hatch_Input_Bus_HV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (HV)", 3, 16).get(1L));
		ItemList.Hatch_Input_Bus_EV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (EV)", 4, 25).get(1L));
		ItemList.Hatch_Input_Bus_IV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (IV)", 5, 36).get(1L));
		ItemList.Hatch_Input_Bus_LuV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (LuV)", 6, 49).get(1L));
		ItemList.Hatch_Input_Bus_ZPM.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (ZPM)", 7, 64).get(1L));
		ItemList.Hatch_Input_Bus_UV.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (UV)", 8, 64).get(1L));
		ItemList.Hatch_Input_Bus_MAX.set(new Hatch_Input_Item(MACHINES_ID_START++, "Input Bus (UHV)", 9, 64).get(1L));
		
		ItemList.Hatch_Output_Bus_ULV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (ULV)", 0, 1).get(1L));
		ItemList.Hatch_Output_Bus_LV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (LV)", 1, 4).get(1L));
		ItemList.Hatch_Output_Bus_MV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (MV)", 2, 9).get(1L));
		ItemList.Hatch_Output_Bus_HV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (HV)", 3, 16).get(1L));
		ItemList.Hatch_Output_Bus_EV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (EV)", 4, 25).get(1L));
		ItemList.Hatch_Output_Bus_IV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (IV)", 5, 36).get(1L));
		ItemList.Hatch_Output_Bus_LuV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (LuV)", 6, 49).get(1L));
		ItemList.Hatch_Output_Bus_ZPM.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (ZPM)", 7, 64).get(1L));
		ItemList.Hatch_Output_Bus_UV.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (UV)", 8, 64).get(1L));
		ItemList.Hatch_Output_Bus_MAX.set(new Hatch_Output_Item(MACHINES_ID_START++, "Output Bus (UHV)", 9, 64).get(1L));
		
		ItemList.Hatch_Maintenance.set(new Hatch_Maintenance(MACHINES_ID_START++, "Maintenance Hatch", false).get(1L));
		ItemList.Hatch_AutoMaintenance.set(new Hatch_Maintenance(MACHINES_ID_START++, "Auto Maintenance Hatch", true).get(1L));
		
		ItemList.Hatch_Energy_ULV.set(new Hatch_Energy_In(40, "ULV Energy Hatch", 0).get(1L));
		ItemList.Hatch_Energy_LV.set(new Hatch_Energy_In(41, "LV Energy Hatch", 1).get(1L));
		ItemList.Hatch_Energy_MV.set(new Hatch_Energy_In(42, "MV Energy Hatch", 2).get(1L));
		ItemList.Hatch_Energy_HV.set(new Hatch_Energy_In(43, "HV Energy Hatch", 3).get(1L));
		ItemList.Hatch_Energy_EV.set(new Hatch_Energy_In(44, "EV Energy Hatch", 4).get(1L));
		ItemList.Hatch_Energy_IV.set(new Hatch_Energy_In(45, "IV Energy Hatch", 5).get(1L));
		ItemList.Hatch_Energy_LuV.set(new Hatch_Energy_In(46, "LuV Energy Hatch", 6).get(1L));
		ItemList.Hatch_Energy_ZPM.set(new Hatch_Energy_In(47, "ZPM Energy Hatch", 7).get(1L));
		ItemList.Hatch_Energy_UV.set(new Hatch_Energy_In(48, "UV Energy Hatch", 8).get(1L));
		ItemList.Hatch_Energy_MAX.set(new Hatch_Energy_In(49, "UHV Energy Hatch", 9).get(1L));
		
		ItemList.DEBUG_HATCH_ENERGY_OUT.set(new Hatch_Creative_OutEnergy(MACHINES_ID_START++, "Debug Energy Out Hatch").get(1L));
		
		if (MACHINES_ID_START > MACHINES_ID_END) throw new IndexOutOfBoundsException("Conflict MetaTiles IDs");
	}
}