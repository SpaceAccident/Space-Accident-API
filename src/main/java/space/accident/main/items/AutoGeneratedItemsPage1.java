package space.accident.main.items;

import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.MathHelper;
import space.accident.api.API;
import space.accident.api.enums.MaterialList;
import space.accident.api.enums.Materials;
import space.accident.api.enums.OrePrefixes;
import space.accident.api.items.MetaGeneratedItem32;

import java.util.List;

import static space.accident.api.API.MAX_MATERIALS;
import static space.accident.api.enums.OrePrefixes.*;

public class AutoGeneratedItemsPage1 extends MetaGeneratedItem32 {
	public static AutoGeneratedItemsPage1 INSTANCE;
	
	public AutoGeneratedItemsPage1() {
		super("metaitem.01", ingot, dust, plate);
	}
	
	@Override
	public boolean onEntityItemUpdate(EntityItem entityItem) {
		
		int meta = entityItem.getEntityItem().getItemDamage();
		if ((meta < MAX_COUNT_AUTOGENERATED_ITEMS) && (meta >= 0) && (!entityItem.worldObj.isRemote)) {
			Materials aMaterial = API.sGeneratedMaterials[(meta % MAX_MATERIALS)];
			if ((aMaterial != null) && (aMaterial != MaterialList._NULL)) {
				int x = MathHelper.floor_double(entityItem.posX);
				int y = MathHelper.floor_double(entityItem.posY);
				int z = MathHelper.floor_double(entityItem.posZ);
				OrePrefixes ore = this.mGeneratedPrefixList[(meta / MAX_MATERIALS)];
				switch (ore) {
					// orePrefix
					default:
						return false;
				}
			}
		}
		return false;
	}
	
	@Override
	protected void addToolTip(List<String> tooltips, ItemStack stack, EntityPlayer player) {
		super.addToolTip(tooltips, stack, player);
		int meta = stack.getItemDamage();
		if ((meta < MAX_COUNT_AUTOGENERATED_ITEMS) && (meta >= 0)) {
			Materials aMaterial = API.sGeneratedMaterials[(meta % MAX_MATERIALS)];
			if ((aMaterial != null) && (aMaterial != MaterialList._NULL)) {
				OrePrefixes ore = this.mGeneratedPrefixList[(meta / MAX_MATERIALS)];
				switch (ore) {
					// orePrefix:
						//if (ore == impure) {
						//	tooltips.add(this.mToolTipPurify);
						//}
					default:
						break;
				}
			}
		}
	}
}