package space.accident.main.common.blocks;

import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.Packet;
import net.minecraft.tileentity.TileEntity;
import space.accident.api.enums.Materials;
import space.accident.api.enums.OrePrefixes;
import space.accident.api.interfaces.ITexture;
import space.accident.api.interfaces.tileentity.ITexturedTileEntity;
import space.accident.api.render.TextureFactory;
import space.accident.main.network.Packet_MetaBlocks;

import java.util.ArrayList;

import static space.accident.api.API.MAX_MATERIALS;
import static space.accident.api.API.sGeneratedMaterials;
import static space.accident.api.enums.TextureSet.NONE;
import static space.accident.api.items.MetaGeneratedItem.MAX_COUNT_AUTOGENERATED_ITEMS;
import static space.accident.extensions.WorldUtil.isOpaqueBlock;
import static space.accident.main.SpaceAccidentApi.NETWORK;

public class TileEntity_MetaBlocks extends TileEntity implements ITexturedTileEntity {
	
	public short mMetaData = 0;
	public boolean mNatural = false;
	public boolean mBlocked = true;
	
	public static int getHarvestData(short meta, int aBaseBlockHarvestLevel) {
		Materials aMaterial = sGeneratedMaterials[(meta % MAX_MATERIALS)];
		return aMaterial == null ? 0 : Math.max(aBaseBlockHarvestLevel, 5);
	}
	
	@Override
	public void readFromNBT(NBTTagCompound nbt) {
		super.readFromNBT(nbt);
		this.mMetaData = nbt.getShort("m");
		this.mNatural  = nbt.getBoolean("n");
	}
	
	@Override
	public void writeToNBT(NBTTagCompound nbt) {
		super.writeToNBT(nbt);
		nbt.setShort("m", this.mMetaData);
		nbt.setBoolean("n", this.mNatural);
	}
	
	@Override
	public boolean canUpdate() {
		return false;
	}
	
	public short getMetaData() {
		return this.mMetaData;
	}
	
	public ArrayList<ItemStack> getDrops(Block aDroppedOre) {
		ArrayList<ItemStack> rList = new ArrayList<>();
		if (this.mMetaData <= 0) {
			rList.add(new ItemStack(Blocks.cobblestone, 1, 0));
			return rList;
		}
		rList.add(new ItemStack(aDroppedOre, 1, this.mMetaData));
		return rList;
	}
	
	public void onUpdated() {
		if ((!this.worldObj.isRemote) && (this.mBlocked)) {
			this.mBlocked = false;
			NETWORK.sendPacketToAllPlayersInRange(this.worldObj, new Packet_MetaBlocks(this.xCoord, (short) this.yCoord, this.zCoord, this.mMetaData), this.xCoord, this.zCoord);
		}
	}
	
	@Override
	public Packet getDescriptionPacket() {
		if (!this.worldObj.isRemote) {
			if (!(this.mBlocked = (isOpaqueBlock(this.worldObj, this.xCoord + 1, this.yCoord, this.zCoord) && isOpaqueBlock(this.worldObj, this.xCoord - 1, this.yCoord, this.zCoord) && isOpaqueBlock(this.worldObj, this.xCoord, this.yCoord + 1, this.zCoord) && isOpaqueBlock(this.worldObj, this.xCoord, this.yCoord - 1, this.zCoord) && isOpaqueBlock(this.worldObj, this.xCoord, this.yCoord, this.zCoord + 1) && isOpaqueBlock(this.worldObj, this.xCoord, this.yCoord, this.zCoord - 1)))) {
				NETWORK.sendPacketToAllPlayersInRange(this.worldObj, new Packet_MetaBlocks(this.xCoord, (short) this.yCoord, this.zCoord, this.mMetaData), this.xCoord, this.zCoord);
			}
		}
		return null;
	}
	
	@Override
	public ITexture[] getTexture(Block block, int side) {
		Materials aMaterial = sGeneratedMaterials[(this.mMetaData % MAX_MATERIALS)];
		if ((aMaterial != null) && (this.mMetaData < MAX_COUNT_AUTOGENERATED_ITEMS)) {
			ITexture iTexture = TextureFactory.builder().addIcon(aMaterial.icon.textures[OrePrefixes.block.textureId]).setRGBA(aMaterial.mRGBa).stdOrient().build();
			if (block instanceof Meta_Block_Abstract) {
				return new ITexture[]{((Meta_Block_Abstract) block).getTextureSet()[((this.mMetaData / MAX_MATERIALS) % 16)], iTexture};
			}
		}
		return new ITexture[]{TextureFactory.of(Blocks.stone, 0), TextureFactory.builder().addIcon(NONE.textures[OrePrefixes.block.textureId]).stdOrient().build()};
	}
}
